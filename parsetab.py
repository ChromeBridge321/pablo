
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftSUMARESTAleftMULTIPLICACIONDIVISIONrightUMINUSASIGNACION CADENA DIVISION IMPRIMIR MIENTRAS MULTIPLICACION NUMERO PARA PARENTESIS_D PARENTESIS_I RESTA SI SINO SUMA VAR VARIABLEstatement : VARIABLE ASIGNACION expressionstatement : expressionexpression : expression SUMA expression\n| expression RESTA expression\n| expression MULTIPLICACION expression\n| expression DIVISION expressionexpression : RESTA expression %prec UMINUSexpression : PARENTESIS_I expression PARENTESIS_Dexpression : NUMEROexpression : CADENAexpression : VARIABLEstatement : IMPRIMIR PARENTESIS_I expression PARENTESIS_D'
    
_lr_action_items = {'VARIABLE':([0,5,6,9,10,11,12,13,14,],[2,16,16,16,16,16,16,16,16,]),'IMPRIMIR':([0,],[4,]),'RESTA':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,],[6,-11,11,6,6,-9,-10,6,6,6,6,6,6,11,-11,-7,11,-3,-4,-5,-6,11,-8,]),'PARENTESIS_I':([0,4,5,6,9,10,11,12,13,14,],[5,14,5,5,5,5,5,5,5,5,]),'NUMERO':([0,5,6,9,10,11,12,13,14,],[7,7,7,7,7,7,7,7,7,]),'CADENA':([0,5,6,9,10,11,12,13,14,],[8,8,8,8,8,8,8,8,8,]),'$end':([1,2,3,7,8,16,17,18,19,20,21,22,24,25,],[0,-11,-2,-9,-10,-11,-7,-1,-3,-4,-5,-6,-8,-12,]),'ASIGNACION':([2,],[9,]),'SUMA':([2,3,7,8,15,16,17,18,19,20,21,22,23,24,],[-11,10,-9,-10,10,-11,-7,10,-3,-4,-5,-6,10,-8,]),'MULTIPLICACION':([2,3,7,8,15,16,17,18,19,20,21,22,23,24,],[-11,12,-9,-10,12,-11,-7,12,12,12,-5,-6,12,-8,]),'DIVISION':([2,3,7,8,15,16,17,18,19,20,21,22,23,24,],[-11,13,-9,-10,13,-11,-7,13,13,13,-5,-6,13,-8,]),'PARENTESIS_D':([7,8,15,16,17,19,20,21,22,23,24,],[-9,-10,24,-11,-7,-3,-4,-5,-6,25,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,5,6,9,10,11,12,13,14,],[3,15,17,18,19,20,21,22,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> VARIABLE ASIGNACION expression','statement',3,'p_statement_assign','parser.py',16),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',21),
  ('expression -> expression SUMA expression','expression',3,'p_expression_binop','parser.py',25),
  ('expression -> expression RESTA expression','expression',3,'p_expression_binop','parser.py',26),
  ('expression -> expression MULTIPLICACION expression','expression',3,'p_expression_binop','parser.py',27),
  ('expression -> expression DIVISION expression','expression',3,'p_expression_binop','parser.py',28),
  ('expression -> RESTA expression','expression',2,'p_expression_uminus','parser.py',39),
  ('expression -> PARENTESIS_I expression PARENTESIS_D','expression',3,'p_expression_group','parser.py',43),
  ('expression -> NUMERO','expression',1,'p_expression_number','parser.py',47),
  ('expression -> CADENA','expression',1,'p_expression_string','parser.py',51),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',55),
  ('statement -> IMPRIMIR PARENTESIS_I expression PARENTESIS_D','statement',4,'p_print_statement','parser.py',63),
]
